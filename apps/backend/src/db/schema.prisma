datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["driverAdapters"]
}

model User {
  id           String   @id
  username     String
  createdAt    DateTime @default(now())
  email        String?  @unique
  passwordHash String?
  verified     Boolean  @default(false)

  // preference
  allowEmailNotifications Boolean @default(false)

  sessions      Session[]
  oauthAccounts OAuthAccount[]
  roles         UserRole[]
  createdCases  Case[]
  teams         UserTeam[]

  // one time tokens
  passwordResetToken   PasswordResetToken?
  verificationToken    VerificationToken?
  peddlerMergeRequests PeddlerMergeRequest[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model OAuthAccount {
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([providerId, providerUserId])
}

model PasswordResetToken {
  id        String   @id @default(uuid(7))
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(uuid(7))
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id        String     @id @default(uuid(7))
  name      String     @unique
  photoPath String?
  members   UserTeam[]
}

model UserTeam {
  id     String @id @default(uuid(7))
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  userId String
  teamId String
}

model Policy {
  id         String       @id @default(uuid(7))
  name       String       @unique
  action     String
  resource   String
  conditions Condition[]
  roles      PolicyRole[]
}

model PolicyRole {
  id       String @id @default(uuid(7))
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  policyId String
  roleId   String
}

model Condition {
  id       String @id @default(uuid(7))
  field    String
  operator String
  value    String
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  policyId String
}

model Role {
  id       String       @id @default(uuid(7))
  name     String       @unique
  policies PolicyRole[]
  users    UserRole[]
}

model UserRole {
  id     String @id @default(uuid(7))
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  userId String
  roleId String
}

model Peddler {
  id           String  @id @default(uuid(7))
  codename     String  @unique
  mainRegionId String
  firstName    String?
  lastName     String
  race         String
  sex          String
  birthYear    String

  createdAt DateTime @default(now())

  disabilities     PeddlerDisability[]
  mainRegion       Region                @relation(fields: [mainRegionId], references: [id])
  cases            Case[]
  mergeRequestsNew PeddlerMergeRequest[] @relation(name: "peddlerNew")
  mergeRequestsOld PeddlerMergeRequest[] @relation(name: "peddlerOld")
}

model PeddlerDisability {
  id           String     @id @default(uuid(7))
  peddler      Peddler    @relation(fields: [peddlerId], references: [id], onDelete: Cascade)
  disability   Disability @relation(fields: [disabilityId], references: [id], onDelete: Restrict)
  peddlerId    String
  disabilityId String
}

model Disability {
  id   String @id @default(uuid(7))
  name String @unique

  peddlers PeddlerDisability[]
}

model Region {
  id        String    @id @default(uuid(7))
  name      String    @unique
  photoPath String?
  peddlers  Peddler[]
  cases     Case[]
}

model Case {
  id               String      @id @default(uuid(7))
  peddler          Peddler     @relation(fields: [peddlerId], references: [id], onDelete: Cascade)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  createdBy        User        @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById      String
  interactionDate  DateTime
  regionId         String
  region           Region      @relation(fields: [regionId], references: [id], onDelete: Restrict)
  location         String
  photos           CasePhoto[]
  notes            String
  importance       Int
  firstInteraction Boolean

  peddlerId String
}

model CasePhoto {
  id        String @id @default(uuid(7))
  case      Case   @relation(fields: [caseId], references: [id])
  caseId    String
  photoPath String
}

model PeddlerMergeRequest {
  id            String  @id @default(uuid(7))
  peddlerNew    Peddler @relation(name: "peddlerNew", fields: [peddlerNewId], references: [id], onDelete: Cascade)
  peddlerNewId  String
  peddlerOld    Peddler @relation(name: "peddlerOld", fields: [peddlerOldId], references: [id], onDelete: Cascade)
  peddlerOldId  String
  requestedBy   User    @relation(fields: [requestedById], references: [id], onDelete: Cascade)
  requestedById String
  notes         String
}
